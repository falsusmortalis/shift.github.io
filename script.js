// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// URL –≤–∞—à–µ–≥–æ Python –±—ç–∫–µ–Ω–¥–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
const BACKEND_URL = "https://falsusmortalis.github.io/shift.github.io/";

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    employees: [],
    schedule: {},
    results: null
};

// –ü–æ–∫–∞–∑ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function updateEmployeeFields() {
    const count = parseInt(document.getElementById('employeeCount').value);
    const container = document.getElementById('employeeFields');
    container.innerHTML = '';
    
    for (let i = 0; i < count; i++) {
        const employeeHtml = `
            <div class="employee-item">
                <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${i + 1}</h3>
                <div class="input-group">
                    <label>–§–∞–º–∏–ª–∏—è:</label>
                    <input type="text" id="empName${i}" placeholder="–ò–≤–∞–Ω–æ–≤">
                </div>
                <div class="input-group">
                    <label>–û—Ç–ø—É—Å–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –î–î.–ú–ú.–ì–ì–ì–ì):</label>
                    <input type="text" id="empVacation${i}" placeholder="01.10.2025, 02.10.2025">
                </div>
                <div class="input-group">
                    <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10):</label>
                    <input type="number" id="empPriority${i}" min="0" max="10" value="0">
                </div>
            </div>
        `;
        container.innerHTML += employeeHtml;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function saveEmployees() {
    const count = parseInt(document.getElementById('employeeCount').value);
    appData.employees = [];
    
    for (let i = 0; i < count; i++) {
        const name = document.getElementById('empName' + i)?.value.trim();
        if (name) {
            const vacationText = document.getElementById('empVacation' + i)?.value || '';
            const priority = parseInt(document.getElementById('empPriority' + i)?.value) || 0;
            
            const vacationDates = vacationText.split(',')
                .map(d => d.trim())
                .filter(d => d)
                .map(d => parseDate(d))
                .filter(d => d !== null);
            
            appData.employees.push({
                name: name,
                vacation_days: vacationDates.map(d => formatDate(d)),
                priority: priority
            });
        }
    }
    
    if (appData.employees.length > 0) {
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${appData.employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`, 'success');
        showTab('schedule');
    } else {
        showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'error');
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function parseSchedule() {
    const scheduleText = document.getElementById('manualSchedule').value;
    if (!scheduleText.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
        return;
    }
    
    appData.schedule = {};
    const lines = scheduleText.split('\n');
    let parsedDays = 0;
    let parsedShifts = 0;
    
    for (let line of lines) {
        line = line.trim();
        if (!line || line.startsWith('–¥–∞—Ç–∞')) continue;
        
        const parts = line.split(';');
        if (parts.length >= 2) {
            const dateStr = parts[0].trim();
            const shiftsStr = parts[1].trim();
            
            try {
                const date = parseDate(dateStr);
                if (date) {
                    const shifts = shiftsStr.split(',')
                        .map(s => parseInt(s.trim()))
                        .filter(s => s >= 1 && s <= 7);
                    
                    if (shifts.length > 0) {
                        appData.schedule[formatDate(date)] = shifts;
                        parsedDays++;
                        parsedShifts += shifts.length;
                    }
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏:', line);
            }
        }
    }
    
    if (parsedDays > 0) {
        showNotification(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${parsedDays} –¥–Ω–µ–π, ${parsedShifts} –Ω–∞—Ä—è–¥–æ–≤`, 'success');
        showTab('results');
    } else {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
async function generateSchedule() {
    if (appData.employees.length === 0) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'error');
        return;
    }
    
    if (Object.keys(appData.schedule).length === 0) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
        return;
    }
    
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('generateBtn').disabled = true;
    
    try {
        const response = await fetch(BACKEND_URL + '/api/distribute', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                employees: appData.employees,
                schedule: appData.schedule
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            appData.results = result.data;
            displayResults();
            showNotification('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        } else {
            throw new Error(result.error);
        }
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: ' + error.message, 'error');
    } finally {
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('generateBtn').disabled = false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults() {
    const container = document.getElementById('resultsContainer');
    const results = appData.results;
    
    if (!results) return;
    
    let html = `
        <div class="result-item">
            <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong><br>
            –í—Å–µ–≥–æ –Ω–∞—Ä—è–¥–æ–≤: ${results.statistics.total_assigned + results.statistics.total_unassigned}<br>
            –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${results.statistics.total_assigned}<br>
            –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${results.statistics.total_unassigned}<br>
            –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${results.statistics.total_employees}
        </div>
    `;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    html += '<h3>üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</h3>';
    for (const [empName, stats] of Object.entries(results.employee_stats)) {
        html += `
            <div class="result-item">
                <strong>${empName}</strong><br>
                –ù–∞—Ä—è–¥–æ–≤: ${stats.shifts_count}<br>
                –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${stats.remaining_slots}
            </div>
        `;
    }
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    if (results.assigned_shifts.length > 0) {
        html += '<h3>‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã:</h3>';
        results.assigned_shifts.forEach(shift => {
            html += `
                <div class="result-item">
                    ${shift.date} - –ù–∞—Ä—è–¥ ${shift.type} ‚Üí ${shift.employee_name}
                </div>
            `;
        });
    }
    
    // –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    if (results.unassigned_shifts.length > 0) {
        html += '<h3>‚ö†Ô∏è –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã:</h3>';
        results.unassigned_shifts.forEach(shift => {
            html += `
                <div class="error-item">
                    ${shift.date} - –ù–∞—Ä—è–¥ ${shift.type}<br>
                    <small>–ü—Ä–∏—á–∏–Ω–∞: ${shift.reason}</small>
                </div>
            `;
        });
    }
    
    container.innerHTML = html;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function parseDate(dateStr) {
    const parts = dateStr.split('.');
    if (parts.length === 3) {
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]) - 1;
        const year = parseInt(parts[2]);
        return new Date(year, month, day);
    }
    return null;
}

function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}

function showNotification(message, type) {
    tg.showPopup({
        title: type === 'success' ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞',
        message: message,
        buttons: [{ type: 'ok' }]
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    updateEmployeeFields();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
    const user = tg.initDataUnsafe.user;
    if (user) {
        const welcomeText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!`;
        console.log(welcomeText);
    }
});
