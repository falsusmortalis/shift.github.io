// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let scheduler = new ShiftScheduler();
let appData = {
    employees: [],
    schedule: {}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof window.Telegram !== 'undefined') {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        console.log("Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    initTabs();
    initEmployeeFields();
    setupEventListeners();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
function initTabs() {
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            showTab(tabName);
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
function showTab(tabName) {
    console.log("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É:", tabName);
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName + '-tab').classList.add('active');
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function initEmployeeFields() {
    updateEmployeeFields();
    
    // –û–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    document.getElementById('employeeCount').addEventListener('change', updateEmployeeFields);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function updateEmployeeFields() {
    const count = parseInt(document.getElementById('employeeCount').value);
    const container = document.getElementById('employeeFields');
    
    let html = '';
    for (let i = 0; i < count; i++) {
        html += `
            <div class="employee-item">
                <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${i + 1}</h3>
                <div class="input-group">
                    <label>–§–∞–º–∏–ª–∏—è:</label>
                    <input type="text" id="empName${i}" placeholder="–ò–≤–∞–Ω–æ–≤" value="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${i + 1}">
                </div>
                <div class="input-group">
                    <label>–û—Ç–ø—É—Å–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –î–î.–ú–ú.–ì–ì–ì–ì):</label>
                    <input type="text" id="empVacation${i}" placeholder="01.10.2025, 02.10.2025">
                </div>
                <div class="input-group">
                    <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10):</label>
                    <input type="number" id="empPriority${i}" min="0" max="10" value="0">
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    document.getElementById('saveEmployeesBtn').addEventListener('click', saveEmployees);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    document.getElementById('parseScheduleBtn').addEventListener('click', parseSchedule);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    document.getElementById('generateBtn').addEventListener('click', generateSchedule);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function saveEmployees() {
    console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...");
    
    const count = parseInt(document.getElementById('employeeCount').value);
    appData.employees = [];
    
    for (let i = 0; i < count; i++) {
        const name = document.getElementById('empName' + i).value.trim();
        if (name) {
            const vacationText = document.getElementById('empVacation' + i).value || '';
            const priority = parseInt(document.getElementById('empPriority' + i).value) || 0;
            
            const vacationDates = vacationText.split(',')
                .map(d => d.trim())
                .filter(d => d);
            
            appData.employees.push({
                name: name,
                vacationDays: vacationDates,
                priority: priority
            });
        }
    }
    
    if (appData.employees.length > 0) {
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${appData.employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`, 'success');
        showTab('schedule');
    } else {
        showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'error');
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function parseSchedule() {
    console.log("–ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...");
    
    const scheduleText = document.getElementById('manualSchedule').value;
    if (!scheduleText.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
        return;
    }
    
    appData.schedule = {};
    const lines = scheduleText.split('\n');
    let parsedDays = 0;
    let parsedShifts = 0;
    
    // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    if (scheduleText.trim() === '') {
        appData.schedule = {
            '01.10.2025': [1, 2, 3],
            '02.10.2025': [1, 2],
            '03.10.2025': [1, 2, 3, 4]
        };
        parsedDays = 3;
        parsedShifts = 8;
    } else {
        for (let line of lines) {
            line = line.trim();
            if (!line || line.startsWith('–¥–∞—Ç–∞')) continue;
            
            const parts = line.split(';');
            if (parts.length >= 2) {
                const dateStr = parts[0].trim();
                const shiftsStr = parts[1].trim();
                
                // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
                if (dateStr.match(/^\d{2}\.\d{2}\.\d{4}$/)) {
                    const shifts = shiftsStr.split(',')
                        .map(s => parseInt(s.trim()))
                        .filter(s => s >= 1 && s <= 7);
                    
                    if (shifts.length > 0) {
                        appData.schedule[dateStr] = shifts;
                        parsedDays++;
                        parsedShifts += shifts.length;
                    }
                }
            }
        }
    }
    
    if (parsedDays > 0) {
        showNotification(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${parsedDays} –¥–Ω–µ–π, ${parsedShifts} –Ω–∞—Ä—è–¥–æ–≤`, 'success');
        showTab('results');
    } else {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞;–Ω–∞—Ä—è–¥—ã', 'error');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function generateSchedule() {
    console.log("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...");
    
    if (appData.employees.length === 0) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'error');
        return;
    }
    
    if (Object.keys(appData.schedule).length === 0) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
        return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('generateBtn').disabled = true;
    
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è loading
    setTimeout(() => {
        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler = new ShiftScheduler();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            appData.employees.forEach(empData => {
                scheduler.addEmployee(
                    empData.name,
                    empData.vacationDays,
                    empData.priority
                );
            });
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            scheduler.generateSchedule(appData.schedule);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            displayResults();
            
            showNotification('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        } finally {
            document.getElementById('loading').classList.add('hidden');
            document.getElementById('generateBtn').disabled = false;
        }
    }, 500);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults() {
    const container = document.getElementById('resultsContainer');
    const stats = scheduler.getStatistics();
    
    let html = `
        <div class="result-item">
            <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong><br>
            –í—Å–µ–≥–æ –Ω–∞—Ä—è–¥–æ–≤: ${stats.totalRequested}<br>
            –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${stats.totalAssigned}<br>
            –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${stats.totalUnassigned}<br>
            –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${stats.totalEmployees}
        </div>
    `;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    html += '<h3>üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</h3>';
    scheduler.employees.forEach(employee => {
        const employeeStats = scheduler.employeeStats.get(employee.id);
        html += `
            <div class="result-item">
                <strong>${employee.name}</strong><br>
                –ù–∞—Ä—è–¥–æ–≤: ${employeeStats.shiftsCount}<br>
                –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${employeeStats.monthlySlots}
            </div>
        `;
    });
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    if (scheduler.assignedShifts.length > 0) {
        html += '<h3>‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã:</h3>';
        scheduler.assignedShifts.slice(0, 10).forEach(shift => {
            html += `
                <div class="result-item">
                    ${shift.date} - –ù–∞—Ä—è–¥ ${shift.type} ‚Üí ${shift.employeeName}
                </div>
            `;
        });
        if (scheduler.assignedShifts.length > 10) {
            html += `<div class="result-item">... –∏ –µ—â–µ ${scheduler.assignedShifts.length - 10} –Ω–∞—Ä—è–¥–æ–≤</div>`;
        }
    }
    
    // –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    if (scheduler.unassignedShifts.length > 0) {
        html += '<h3>‚ö†Ô∏è –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã:</h3>';
        scheduler.unassignedShifts.forEach(shift => {
            html += `
                <div class="error-item">
                    ${shift.date} - –ù–∞—Ä—è–¥ ${shift.type}
                </div>
            `;
        });
    }
    
    container.innerHTML = html;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type) {
    console.log(type + ":", message);
    
    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ alert
    alert((type === 'success' ? '‚úÖ ' : '‚ùå ') + message);
    
    // –ï—Å–ª–∏ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ popup
    if (typeof window.Telegram !== 'undefined') {
        window.Telegram.WebApp.showPopup({
            title: type === 'success' ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞',
            message: message
        });
    }
}
