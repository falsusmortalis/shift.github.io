// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
let scheduler = new ShiftScheduler();

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    employees: [],
    schedule: {},
    results: null
};

// [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º generateSchedule]

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
async function generateSchedule() {
    if (appData.employees.length === 0) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'error');
        return;
    }
    
    if (Object.keys(appData.schedule).length === 0) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
        return;
    }
    
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('generateBtn').disabled = true;
    
    try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = new ShiftScheduler();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        appData.employees.forEach(empData => {
            scheduler.addEmployee(
                empData.name,
                empData.vacation_days,
                [], // preferred exclusion days
                empData.priority
            );
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        scheduler.generateSchedule(appData.schedule);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        appData.results = formatResults(scheduler);
        displayResults();
        
        showNotification('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: ' + error.message, 'error');
        console.error(error);
    } finally {
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('generateBtn').disabled = false;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatResults(scheduler) {
    const stats = scheduler.getStatistics();
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    const assignedShifts = scheduler.assignedShifts.map(shift => {
        const employee = scheduler.employees.find(e => e.id === shift.employeeId);
        return {
            date: scheduler.formatDate(shift.date),
            type: shift.type,
            employee_name: employee ? employee.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
    });
    
    // –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    const unassignedShifts = scheduler.unassignedShifts.map(shift => ({
        date: scheduler.formatDate(shift.date),
        type: shift.type,
        reason: scheduler.analyzeUnassignedReason(shift)
    }));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    const employeeStats = {};
    scheduler.employees.forEach(emp => {
        const stats = scheduler.employeeStats.get(emp.id);
        employeeStats[emp.name] = {
            shifts_count: stats.shiftsCount,
            remaining_slots: stats.monthlySlots
        };
    });
    
    return {
        assigned_shifts: assignedShifts,
        unassigned_shifts: unassignedShifts,
        employee_stats: employeeStats,
        statistics: {
            total_employees: stats.total_employees,
            total_assigned: stats.total_assigned,
            total_unassigned: stats.total_unassigned,
            total_requested: stats.total_requested
        }
    };
}

// [–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
function showTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');
}

function updateEmployeeFields() {
    const count = parseInt(document.getElementById('employeeCount').value);
    const container = document.getElementById('employeeFields');
    container.innerHTML = '';
    
    for (let i = 0; i < count; i++) {
        const employeeHtml = `
            <div class="employee-item">
                <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${i + 1}</h3>
                <div class="input-group">
                    <label>–§–∞–º–∏–ª–∏—è:</label>
                    <input type="text" id="empName${i}" placeholder="–ò–≤–∞–Ω–æ–≤">
                </div>
                <div class="input-group">
                    <label>–û—Ç–ø—É—Å–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –î–î.–ú–ú.–ì–ì–ì–ì):</label>
                    <input type="text" id="empVacation${i}" placeholder="01.10.2025, 02.10.2025">
                </div>
                <div class="input-group">
                    <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10):</label>
                    <input type="number" id="empPriority${i}" min="0" max="10" value="0">
                </div>
            </div>
        `;
        container.innerHTML += employeeHtml;
    }
}

function saveEmployees() {
    const count = parseInt(document.getElementById('employeeCount').value);
    appData.employees = [];
    
    for (let i = 0; i < count; i++) {
        const name = document.getElementById('empName' + i)?.value.trim();
        if (name) {
            const vacationText = document.getElementById('empVacation' + i)?.value || '';
            const priority = parseInt(document.getElementById('empPriority' + i)?.value) || 0;
            
            const vacationDates = vacationText.split(',')
                .map(d => d.trim())
                .filter(d => d);
            
            appData.employees.push({
                name: name,
                vacation_days: vacationDates,
                priority: priority
            });
        }
    }
    
    if (appData.employees.length > 0) {
        showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${appData.employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`, 'success');
        showTab('schedule');
    } else {
        showNotification('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'error');
    }
}

function parseSchedule() {
    const scheduleText = document.getElementById('manualSchedule').value;
    if (!scheduleText.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
        return;
    }
    
    appData.schedule = {};
    const lines = scheduleText.split('\n');
    let parsedDays = 0;
    let parsedShifts = 0;
    
    for (let line of lines) {
        line = line.trim();
        if (!line || line.startsWith('–¥–∞—Ç–∞')) continue;
        
        const parts = line.split(';');
        if (parts.length >= 2) {
            const dateStr = parts[0].trim();
            const shiftsStr = parts[1].trim();
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            if (dateStr.match(/^\d{2}\.\d{2}\.\d{4}$/)) {
                const shifts = shiftsStr.split(',')
                    .map(s => parseInt(s.trim()))
                    .filter(s => s >= 1 && s <= 7);
                
                if (shifts.length > 0) {
                    appData.schedule[dateStr] = shifts;
                    parsedDays++;
                    parsedShifts += shifts.length;
                }
            }
        }
    }
    
    if (parsedDays > 0) {
        showNotification(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${parsedDays} –¥–Ω–µ–π, ${parsedShifts} –Ω–∞—Ä—è–¥–æ–≤`, 'success');
        showTab('results');
    } else {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'error');
    }
}

function displayResults() {
    const container = document.getElementById('resultsContainer');
    const results = appData.results;
    
    if (!results) return;
    
    let html = `
        <div class="result-item">
            <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong><br>
            –í—Å–µ–≥–æ –Ω–∞—Ä—è–¥–æ–≤: ${results.statistics.total_requested}<br>
            –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${results.statistics.total_assigned}<br>
            –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${results.statistics.total_unassigned}<br>
            –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${results.statistics.total_employees}
        </div>
    `;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    html += '<h3>üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</h3>';
    for (const [empName, stats] of Object.entries(results.employee_stats)) {
        html += `
            <div class="result-item">
                <strong>${empName}</strong><br>
                –ù–∞—Ä—è–¥–æ–≤: ${stats.shifts_count}<br>
                –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${stats.remaining_slots}
            </div>
        `;
    }
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã (–ø–µ—Ä–≤—ã–µ 10)
    if (results.assigned_shifts.length > 0) {
        html += '<h3>‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã (–ø–µ—Ä–≤—ã–µ 10):</h3>';
        results.assigned_shifts.slice(0, 10).forEach(shift => {
            html += `
                <div class="result-item">
                    ${shift.date} - –ù–∞—Ä—è–¥ ${shift.type} ‚Üí ${shift.employee_name}
                </div>
            `;
        });
        if (results.assigned_shifts.length > 10) {
            html += `<div class="result-item">... –∏ –µ—â–µ ${results.assigned_shifts.length - 10} –Ω–∞—Ä—è–¥–æ–≤</div>`;
        }
    }
    
    // –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    if (results.unassigned_shifts.length > 0) {
        html += '<h3>‚ö†Ô∏è –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã:</h3>';
        results.unassigned_shifts.forEach(shift => {
            html += `
                <div class="error-item">
                    ${shift.date} - –ù–∞—Ä—è–¥ ${shift.type}<br>
                    <small>–ü—Ä–∏—á–∏–Ω–∞: ${shift.reason}</small>
                </div>
            `;
        });
    }
    
    container.innerHTML = html;
}

function showNotification(message, type) {
    tg.showPopup({
        title: type === 'success' ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞',
        message: message,
        buttons: [{ type: 'ok' }]
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    updateEmployeeFields();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
    const user = tg.initDataUnsafe.user;
    if (user) {
        console.log(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!`);
    }
});
