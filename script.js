// –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–∞
let userSubscription = {
    type: 'demo', // 'demo', 'single', 'monthly'
    generationsLeft: 0,
    expiryDate: null,
    isActive: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–∞
function initSubscriptionSystem() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const saved = localStorage.getItem('shiftScheduler_subscription');
    if (saved) {
        userSubscription = JSON.parse(saved);
    } else {
        // –ê–∫—Ç–∏–≤—Ä—É–µ–º –¥–µ–º–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        activateDemo();
    }
    updateStatusDisplay();
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
function activateDemo() {
    userSubscription = {
        type: 'demo',
        generationsLeft: 999, // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–ª—è –¥–µ–º–æ
        expiryDate: null,
        isActive: true
    };
    saveSubscription();
    updateStatusDisplay();
    alert('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –º–µ—Å—è—Ü–∞.');
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
function showPaymentForm(type) {
    const amount = type === 'monthly' ? '300' : '100';
    document.getElementById('paymentAmount').textContent = amount;
    document.getElementById('paymentForm').classList.remove('hidden');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    document.getElementById('paymentForm').dataset.paymentType = type;
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞
function activatePremium() {
    const code = document.getElementById('paymentCode').value.trim();
    const type = document.getElementById('paymentForm').dataset.paymentType;
    
    if (!code) {
        alert('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        return;
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
    // –î–ª—è –¥–µ–º–æ - –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (code.length >= 4) {
        userSubscription = {
            type: type,
            generationsLeft: type === 'monthly' ? 7 : 1,
            expiryDate: type === 'monthly' ? getDateInFuture(30) : null,
            isActive: true
        };
        
        saveSubscription();
        updateStatusDisplay();
        document.getElementById('paymentForm').classList.add('hidden');
        document.getElementById('paymentCode').value = '';
        
        alert('‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    } else {
        alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –±—É–¥—É—â–µ–º
function getDateInFuture(days) {
    const date = new Date();
    date.setDate(date.getDate() + days);
    return date.toISOString();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
function saveSubscription() {
    localStorage.setItem('shiftScheduler_subscription', JSON.stringify(userSubscription));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatusDisplay() {
    const statusInfo = document.getElementById('statusInfo');
    
    if (!userSubscription.isActive) {
        statusInfo.innerHTML = `
            <div class="status-inactive">
                <h4>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</h4>
                <p>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø</p>
            </div>
        `;
        return;
    }
    
    if (userSubscription.type === 'demo') {
        statusInfo.innerHTML = `
            <div class="status-demo">
                <h4>üéØ –î–µ–º–æ-—Ä–µ–∂–∏–º</h4>
                <p>–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞</p>
                <p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å:</strong> –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ</p>
            </div>
        `;
    } else {
        const typeName = userSubscription.type === 'monthly' ? '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' : '–†–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø';
        const expiryText = userSubscription.expiryDate ? 
            `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(userSubscription.expiryDate).toLocaleDateString('ru-RU')}` : 
            '–î–µ–π—Å—Ç–≤—É–µ—Ç 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—é';
        
        statusInfo.innerHTML = `
            <div class="status-active">
                <h4>üíé ${typeName}</h4>
                <p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å:</strong> ${userSubscription.generationsLeft}</p>
                <p>${expiryText}</p>
            </div>
        `;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function checkAccess() {
    if (!userSubscription.isActive) {
        alert('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–µ–º–æ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø.');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    if (userSubscription.type !== 'demo' && userSubscription.generationsLeft <= 0) {
        alert('‚ùå –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.');
        showTab('payment');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –º–µ—Å—è—Ü–∞)
    if (userSubscription.type === 'demo') {
        const hasInvalidDates = Object.keys(appData.schedule).some(date => {
            const day = parseInt(date.split('.')[0]);
            return day > 7;
        });
        
        if (hasInvalidDates) {
            alert('‚ùå –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –º–µ—Å—è—Ü–∞. –ö—É–ø–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ –¥–∞—Ç–∞–º–∏.');
            showTab('payment');
            return false;
        }
    }
    
    return true;
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generateSchedule
function generateSchedule() {
    console.log("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...");
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!checkAccess()) {
        return;
    }
    
    if (appData.employees.length === 0) {
        alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
        return;
    }
    
    if (Object.keys(appData.schedule).length === 0) {
        alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
        return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('generateBtn').disabled = true;
    
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è loading
    setTimeout(() => {
        try {
            // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const results = distributeShifts();
            appData.results = results;
            displayResults();
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            if (userSubscription.type !== 'demo') {
                userSubscription.generationsLeft--;
                saveSubscription();
                updateStatusDisplay();
            }
            
            alert('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
        } finally {
            document.getElementById('loading').classList.add('hidden');
            document.getElementById('generateBtn').disabled = false;
        }
    }, 500);
}

// –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
document.addEventListener('DOMContentLoaded', function() {
    console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof window.Telegram !== 'undefined' && window.Telegram.WebApp) {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        console.log("Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —Å—É—Ç–æ—á–Ω—ã—Ö –Ω–∞—Ä—è–¥–æ–≤
function buildTable() {
    const table = document.getElementById('calendarTable');
    const results = appData.results;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å –Ω–∞—Ä—è–¥—ã)
    const allDates = new Set();
    Object.keys(appData.schedule).forEach(date => allDates.add(date));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —Å—É—Ç–æ—á–Ω—ã—Ö –Ω–∞—Ä—è–¥–æ–≤
    results.assigned.forEach(shift => {
        if (shift.type !== 7) { // –°—É—Ç–æ—á–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
            allDates.add(getNextDay(shift.date));
        }
    });
    
    const dates = Array.from(allDates).sort();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    let html = '<tr><th class="employee-cell">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th>';
    dates.forEach(date => {
        html += `<th title="${date}">${date.split('.')[0]}</th>`;
    });
    html += '<th>–ò—Ç–æ–≥–æ</th></tr>';
    
    // –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    for (const employee of appData.employees) {
        let row = `<tr><td class="employee-cell">${employee.name}</td>`;
        let totalShifts = 0;
        
        for (const date of dates) {
            let content = '';
            let cellClass = '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—É—Å–∫
            if (employee.vacationDays.includes(date)) {
                content = '–•';
                cellClass = 'vacation-cell';
            } 
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –Ω–∞—Ä—è–¥ –≤ —ç—Ç—É –¥–∞—Ç—É
            else {
                const shiftOnThisDate = results.assigned.find(s => s.date === date && s.employee === employee.name);
                if (shiftOnThisDate) {
                    content = shiftOnThisDate.type;
                    cellClass = 'shift-cell';
                    totalShifts++;
                } 
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ —Å—É—Ç–æ—á–Ω–æ–≥–æ –Ω–∞—Ä—è–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Ä—è–¥–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å)
                else {
                    const prevDate = getPrevDay(date);
                    const prevDayShift = results.assigned.find(s => 
                        s.date === prevDate && 
                        s.employee === employee.name && 
                        s.type !== 7 // –¢–æ–ª—å–∫–æ —Å—É—Ç–æ—á–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
                    );
                    if (prevDayShift) {
                        content = '*';
                        cellClass = 'rest-cell';
                    }
                }
            }
            
            row += `<td class="${cellClass}">${content}</td>`;
        }
        
        row += `<td><strong>${totalShifts}</strong></td></tr>`;
        html += row;
    }
    
    // –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã
    if (results.unassigned.length > 0) {
        let row = '<tr><td class="employee-cell" style="background:#e74c3c;color:white;">–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ</td>';
        
        for (const date of dates) {
            const count = results.unassigned.filter(s => s.date === date).length;
            if (count > 0) {
                row += `<td class="unassigned-cell">${count}</td>`;
            } else {
                row += '<td></td>';
            }
        }
        
        row += `<td><strong>${results.unassigned.length}</strong></td></tr>`;
        html += row;
    }
    
    table.innerHTML = html;
}
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    initTabs();
    initEmployeeFields();
    setupEventListeners();
    initSubscriptionSystem(); // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É!
    
    console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ");
});